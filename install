#!/bin/env bash

: ${prefix:="."}
: ${delete:=0}
: ${checkVCF:=1}

while getopts ":cdp:*" option
do
 case "${option}"
 in
 p) prefix=${OPTARG};;
 d) delete=1;;
 c) checkVCF=0;;
 *) echo "Invalid option!"
 esac
done
shift $((OPTIND-1))

prefix="$(sed 's/\/$//' <<< $prefix)"

echo "Checking for Anaconda3 and Snakemake"

conda -V &> /dev/null
if [ $? -ne 0 ]; then
  echo "Please install Anaconda or Miniconda"
  exit 1
fi

python -c "import sys; sys.exit(0) if sys.version_info >= (3, 0) else sys.exit(1)"

if [ $? -ne 0 ]; then
  echo "Please install or activate a python3 environment"
  exit 2
fi

if [ "$(conda list snakemake | grep snakemake | wc -l)" -eq 0 ]; then
  echo "Installing Snakemake"
  conda install snakemake
fi

echo Making directory
mkdir -p ${prefix}/scripts

checkEnv=0

ins_loc () {
  echo Installing local python2 environment
  if [ ! -d .files/scripts/checkEnv ]; then
    conda create -y -p ${prefix}/scripts/checkEnv python=2.7
  else
    cp -r .files/scripts/checkEnv ${prefix}/scripts/
  fi
}

ask_where () {
  prompt=('\e[1;32m'
  '\bInstall Conda env for checkVCF globally? (y/N):'
  '\e[0m ')
  printf "${prompt[*]}"
  [[ -t 0 ]] && {                   # Timeout 10 seconds (read -t 5)
  read -t 10 -n 1 install_global || # read 'fails' on timeout
  install_global=n ; }              # Timeout => answer No
  echo ""
  if [[ $install_global =~ y|Y ]]; then
    conda create -y --name checkVCF python=2.7
    checkEnv=1
  else
    ins_loc
  fi
}

if [ $checkVCF -eq 1 ]; then
  echo Checking for checkVCF environment
  if grep -q "checkVCF" <(conda env list | grep -oP '^\w+(?=\s)'); then
    echo checkVCF environment already exists
  else
    ask_where
  fi # if global conda env not exist
fi # if install checkVCF

echo Ensuring Flippyr is installed

python -c "import flippyr" &>/dev/null
if [ $? -ne 0 ]; then
  pip install flippyr
fi

echo Copying files
for i in .files/{Snakefile,part1.smk,cluster.yaml,config.yaml,run,run_all}; do
  cp $i $prefix
done

for i in .files/scripts/{parse_config.py,__init__.py,fullchunker.py,chunk.py}; do
  cp $i $prefix/scripts/
done

for i in .files/scripts/{process_imiss.R,process_chunk_imiss.R}; do
  cp $i $prefix/scripts/
done

if [ $checkVCF -eq 1 ]; then
  cp .files/scripts/checkVCF.py ${prefix}/scripts/
fi

mkdir ${prefix}/.snakejob

if [ $checkVCF -eq 1 ]; then
  echo "Enabling checkVCF in config file"
  echo "check_vcf: True" >> ${prefix}/config.yaml
  if [ $checkEnv -eq 1 ]; then
    echo foo
    echo "checkEnv: ./scripts/checkEnv" >> ${prefix}/config.yaml
  else
    echo bar
    echo "checkEnv: checkVCF" >> ${prefix}/config.yaml
  fi
else
  echo "Disabling checkVCF in config file"
  echo "check_vcf: False" >> ${prefix}/config.yaml
fi

if [ $delete -eq 1 ]; then
  echo "Deleting install files."
  rm -r .files
  rm -- "$0"
  if [ $prefix != "." ] && [ ${PWD##*/} = "imputePrep" ]; then
    cd ..
    rm -r flipPrep
  fi
fi

echo
echo "You can now run the pipeline on the cluster by navigating to the install"
echo "folder and running ./run -j [number of desired threads]"
echo
echo "Place PLINK binary filesets in the target directory, or in a folder"
echo "specified under \"directory\" in config.yaml"
echo

exit 0
