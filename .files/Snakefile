'''Snakefile for MIS preparation
   Version 0.6'''

configfile: "config.yaml"
shell.executable("/bin/bash")
shell.prefix("PATH=" + config["anaconda"] + ":$PATH; ")

BPLINK = ["bed", "bim", "fam"]

from scripts.parse_config import parser

CHROM, SAMPLE, INPATH, keep_command = parser(config)

localrules: all, var_qc, subj_qc, split_to_vcf

if config['check_vcf']:
    rule all:
        input:
            expand("log/{sample}_chr{chrom}.check.log", sample=SAMPLE, chrom=CHROM)
else:
    rule all:
        input:
            expand("final/{sample}_chr{chrom}.vcf.gz", sample=SAMPLE, chrom=CHROM)

#Pre-split QC

rule var_qc:
    input:
        expand(INPATH + "{{sample}}.{ext}", ext=BPLINK)
    output:
        plink = expand("data/plink/{{sample}}_varqc.{ext}", ext=BPLINK)
    params:
        ins = INPATH + "{sample}",
        out = "data/plink/{sample}_varqc",
        geno = config["qc"]["geno"],
        hwe = config["qc"]["hwe"],
        maf = config["qc"]["maf"]
    threads: 8
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --geno {params.geno} --memory 128 "
        "--keep-allele-order --hwe {params.hwe} --maf {params.maf} "
        "--make-bed --out {params.out}"

rule subj_qc:
    input:
        plink = rules.var_qc.output.plink
    params:
        ins = rules.var_qc.params.out,
        out = "data/plink/{sample}_indivqc",
        mind = config["qc"]["mind"],
        keep = keep_command
    output:
        expand("data/plink/{{sample}}_indivqc.{ext}", ext=BPLINK)
    threads: 8
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--mind {params.mind} --remove samp.irem {params.keep}"
        "--make-bed --out {params.out}"

rule flippyr:
    input:
        fasta = config["ref"],
        plink = rules.subj_qc.output
    params:
        out = "data/plink/{sample}",
        suff = "_refmatched"
    output:
        expand("data/plink/{{sample}}.{ext}", ext=["allele","flip","delete","log","log.tab"]),
        command = "data/plink/{sample}.runPlink",
        plink = expand("data/plink/{{sample}}_refmatched.{ext}", ext=BPLINK)
    threads: 8
    run:
        import flippyr
        flippyr.writeFiles(input["fasta"],input["plink"][1],params["out"],
                           silent=False,plink=False,p_suff=params["suff"])
        shell("module load plink/1.90; bash {}".format(output["command"]))

# Split, sort and compress

rule split_to_vcf: #Split plink files into chromosomes.
    input:
        rules.flippyr.output.plink
    params:
        ins = "data/plink/{sample}_refmatched",
        out = "data/{sample}_chr{chrom}_unsorted",
        c = "{chrom}"
    output:
        "data/{sample}_chr{chrom}_unsorted.vcf"
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --chr {params.c} "
        "--memory 256 --real-ref-alleles "
        "--recode vcf --out {params.out}"

rule compress_vcf:
    input:
        rules.split_to_vcf.output
    output:
        "final/{sample}_chr{chrom}.vcf.gz"
    threads: 8
    shell: "module load tabix/0.2.6 bcftools/1.7; "
        "bcftools sort {input} -Oz -o {output}; tabix -p vcf {output}"

if config['check_vcf']:
    rule check_vcf:
        input:
            fasta=config["ref"],
            vcf="final/{sample}_chr{chrom}.vcf.gz"
        output:
            "log/{sample}_chr{chrom}.check.log"
        params:
            py_env=config["checkEnv"]
        log: "log/{sample}_chr{chrom}"
        shell:
            "source activate {params.py_env}; "
            "python scripts/checkVCF.py -r {input.fasta} -o {log} {input.vcf}"
